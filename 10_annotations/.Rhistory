n_distinct(booking$StartDate)
sessions <- bookings %>%
#group_by(Course) %>%
n_distinct(bookings$StartDate)
sessions <- bookings %>%
group_by(Course) %>%
n_distinct(bookings$StartDate)
sessions <- bookings %>%
sessions <- bookings %>%
group_by(Course) %>%
summarize(n_sessions = n_distinct(StartDate))
sessions = bookings %>%
group_by(Course) %>%
summarize(n_sessions = n_distinct(StartDate))
View(sessions)
bookings <- read.delim("Lab_Bookings_2023.csv", stringsAsFactors = F, sep=",")
bookings_prov <- bookings %>%
#filter(!grepl('CANCELLED', Session)) %>%
group_by(Course) %>%
count(Province)
sessions = bookings %>%
group_by(Course) %>%
summarize(n_sessions = n_distinct(StartDate))
bookings_prov <- bookings %>%
#filter(!grepl('CANCELLED', Session)) %>%
group_by(Course) %>%
count(Province) %>%
ungroup()
View(bookings_prov)
sessions = bookings %>%
group_by(Course) %>%
summarize(n_sessions = n_distinct(StartDate)) %>%
ungroup()
bookings <- read.delim("Lab_Bookings_2023.csv", stringsAsFactors = F, sep=",")
bookings_prov <- bookings %>%
#filter(!grepl('CANCELLED', Session)) %>%
group_by(Course) %>%
count(Province) %>%
ungroup()
sessions = bookings %>%
group_by(Course) %>%
summarize(n_sessions = n_distinct(StartDate)) %>%
ungroup()
bookings_total <- bookings %>%
group_by(Course) %>%
count(FirstName) %>%
ungroup()
View(bookings_total)
bookings_total <- bookings %>%
group_by(Course) %>%
count(FirstName) %>%
ungroup()
bookings_total <- bookings %>%
group_by(Course) %>%
count(StartDate) %>%
ungroup()
b = ggplot(data = bookings_total, mapping = aes(x=course, y=n)) +
geom_point()
ggplot(data = bookings_total, mapping = aes(x=course, y=n)) +
geom_point()
ggplot(data = bookings_total, mapping = aes(x=Course, y=n)) +
geom_point()
ggplot(data = bookings_total, mapping = aes(x=Course, y=n)) +
geom_boxplot()
ggplot(data = bookings_total, mapping = aes(x=Course, y=n)) +
geom_boxplot() +
theme_light()
ggplot(data = bookings_total, mapping = aes(x=Course, y=n)) +
geom_boxplot() +
theme_economist()
library(ggthemes)
ggplot(data = bookings_total, mapping = aes(x=Course, y=n)) +
geom_boxplot() +
theme_classic()
ggplot(data = bookings_total, mapping = aes(x=Course, y=n)) +
geom_boxplot() +
theme_economy()
ggplot(data = bookings_total, mapping = aes(x=Course, y=n)) +
geom_boxplot() +
theme_classic()
ggplot(data = bookings_prov, mapping = aes(x=Course, y=n)) +
geom_bar() +
theme_classic()
ggplot(data = bookings_prov, mapping = aes(x=Course, y=n))
View(bookings_total)
ggplot(data = bookings_prov, mapping = aes(x=Course, y=n)) +
geom_boxplot()
ggplot(data = bookings_prov, mapping = aes(x=Course, y=Province)) +
geom_boxplot()
ggplot(data = bookings_prov, mapping = aes(x=Course, y=n)) +
group_by(Province)
ggplot(data = bookings_total, mapping = aes(x=Course, y=n), colour = Province)
ggplot(bookings_prov, aes(Course, n, colour = Province)) +
geom_boxplot()
ggplot(bookings_prov, aes(Course, n, colour = Province)) +
geom_point()
ggplot(bookings_prov, aes(Course, n, colour = Province)) +
geom_bar()
ggplot(bookings_prov, aes(Course, n, colour = Province)) +
geom_point()
ggplot(bookings_prov, aes(Course, n, colour = Province)) +
geom_point() +
theme_classic()
bookings <- read.delim("Lab_Bookings_2023.csv", stringsAsFactors = F, sep=",")
bookings_prov <- bookings %>%
#filter(!grepl('CANCELLED', Session)) %>%
group_by(Course) %>%
count(Region) %>%
ungroup()
ggplot(bookings_prov, aes(Course, n, colour = Region)) +
geom_point() +
theme_classic()
sessions = bookings %>%
group_by(Course) %>%
summarize(n_sessions = n_distinct(StartDate)) %>%
ungroup()
bookings_total <- bookings %>%
group_by(Course) %>%
count(StartDate) %>%
ungroup()
ggplot(data = bookings_total, mapping = aes(x=Course, y=n)) +
geom_boxplot() +
theme_classic()
ggplot(data = bookings_total, mapping = aes(x=Course, y=n)) +
geom_boxplot() +
theme_classic() +
ggtitle("Total bookings") +
xlab("Course number") + ylab("Number of students")
ggplot(data = bookings_total, mapping = aes(x=Course, y=n)) +
geom_boxplot() +
theme_classic() +
ggtitle("Total bookings per course") +
xlab("Course number") + ylab("Number of students")
ggplot(data = bookings_total, mapping = aes(x=Course, y=n)) +
geom_boxplot() +
theme_classic() +
ggtitle("Total bookings per course") +
xlab("Course number") + ylab("Number of students") +
theme(plot.title = element_text(hjust=0))
ggplot(data = bookings_total, mapping = aes(x=Course, y=n)) +
geom_boxplot() +
theme_classic() +
ggtitle("Total bookings per course") +
xlab("Course number") + ylab("Number of students") +
theme(plot.title = element_text(hjust=1))
ggplot(data = bookings_total, mapping = aes(x=Course, y=n)) +
geom_boxplot() +
theme_classic() +
ggtitle("Total bookings per course") +
xlab("Course number") + ylab("Number of students") +
theme(plot.title = element_text(hjust=0.5))
ggplot(data = bookings_total, mapping = aes(x=Course, y=n)) +
geom_boxplot() +
theme_classic() +
ggtitle("Total bookings per lab") +
xlab("Course number") + ylab("Number of students") +
theme(plot.title = element_text(hjust=0.5))
library(ggthemes)
ggplot(bookings_prov, aes(Course, n, colour = Region)) +
geom_point() +
theme_economist()
remove.packages("ggthemes")
ggplot(bookings_prov, aes(Course, n, colour = Region)) +
geom_point() +
theme_classic()
ggplot(bookings_prov, aes(Course, n, colour = Region)) +
geom_point() +
theme_classic() +
ggtitle("Total bookings per lab") +
xlab("Course number") + ylab("Number of students") +
theme(plot.title = element_text(hjust=0.5))
ggplot(bookings_prov, aes(Course, n, colour = Region)) +
geom_point() +
theme_classic() +
ggtitle("Student Locations") +
xlab("Course number") + ylab("Number of students") +
theme(plot.title = element_text(hjust=0.5))
p = ggplot(bookings_prov, aes(Course, n, colour = Region)) +
geom_point() +
theme_classic() +
ggtitle("Student Locations") +
xlab("Course number") + ylab("Number of students") +
theme(plot.title = element_text(hjust=0.5))
pdf(file="total_bookings.pdf", width=10, height=10)
ggplot(data = bookings_total, mapping = aes(x=Course, y=n)) +
geom_boxplot() +
theme_classic() +
ggtitle("Total students per lab") +
xlab("Course number") + ylab("Number of students") +
theme(plot.title = element_text(hjust=0.5))
dev.off()
pdf(file="total_bookings.pdf", width=10, height=6)
ggplot(data = bookings_total, mapping = aes(x=Course, y=n)) +
geom_boxplot() +
theme_classic() +
ggtitle("Total students per lab") +
xlab("Course number") + ylab("Number of students") +
theme(plot.title = element_text(hjust=0.5))
dev.off()
pdf(file="total_bookings.pdf", width=10, height=6)
ggplot(data = bookings_total, mapping = aes(x=Course, y=n)) +
geom_boxplot() +
theme_classic() +
ggtitle("Total students per lab session") +
xlab("Course number") + ylab("Number of students") +
theme(plot.title = element_text(hjust=0.5))
dev.off()
pdf(file="locations.pdf", width=10, height=6)
ggplot(bookings_prov, aes(Course, n, colour = Region)) +
geom_point() +
theme_classic() +
ggtitle("Student Locations") +
xlab("Course number") + ylab("Number of students") +
theme(plot.title = element_text(hjust=0.5))
sessions = bookings %>%
group_by(Course) %>%
summarize(n_sessions = n_distinct(StartDate)) %>%
ungroup()
dev.off()
pdf(file="locations.pdf", width=10, height=6)
ggplot(bookings_prov, aes(Course, n, colour = Region)) +
geom_point() +
theme_classic() +
ggtitle("Student Locations") +
xlab("Course number") + ylab("Number of students") +
theme(plot.title = element_text(hjust=0.5))
dev.off()
library(tidyverse)
library(patchwork)
library(egg)
library(cowplot)
library("ComplexHeatmap")
library("ape")
library('dendextend')
library("DECIPHER")
sessionInfo(package = NULL)
# make a heatmap using complexheatmap that compares sporothrix species
setwd("~/Documents/2023_02_Sporothrix/10_annotations/")
ML_tree <- ape::read.tree("~/Documents/2023_02_Sporothrix/09_orthology/OrthoFinder/Restuls_Jul26/SpeciesTree_rooted_newick.txt")
ML_tree <- ape::read.tree("~/Documents/2023_02_Sporothrix/09_orthology/OrthoFinder/Results_Aug2/SpeciesTree_rooted.txt")
ML_tree$tip.label
ML_tree
ML_tree <- ape::read.tree("~/Documents/2023_02_Sporothrix/09_orthology/OrthoFinder/Results_Aug2/SpeciesTree_rooted_Newick.txt")
ML_tree$tip.label
ML_tree
ML_dend <- ReadDendrogram(textConnection(write.tree(ML_tree)))
str(ML_dend)
#ML_dend <- DECIPHER::ReadDendrogram("~/Documents/2022_04_eukaryote_annotation/05_genomic_analysis_Sporothrix/ML_tree2.txt",keepRoot = T)
order.dendrogram(ML_dend)
order.dendrogram(ML_dend) <- 1:30 # change the last number to the number of tips.  I'm sure there's a fancy way to put the number of tips but I'm not that fancy.
order.dendrogram(ML_dend)
#make a dataframe of genomes.  I use this dataframe as an anchor to keep the dendrogram and the data aligned.
genome <- unlist(ML_tree$tip.label)
genome_df <- data.frame(genome)
View(genome_df)
#make a dataframe of genome attributes
genome_attributes <- read.delim("~/Documents/2023_02_Sporothrix/10_annotations/genome_attributes.txt")
View(genome_attributes)
#make a dataframe of genome attributes
genome_attributes <- read.delim("~/Documents/2023_02_Sporothrix/10_annotations/genome_attributes.txt")
genome_attributes <- left_join(genome_df,genome_attributes)
View(genome_attributes)
#make a dataframe of genome attributes
genome_attributes <- read.delim("~/Documents/2023_02_Sporothrix/10_annotations/genome_attributes.txt")
View(genome_attributes)
#make a dataframe of genome attributes
genome_attributes <- read.delim("~/Documents/2023_02_Sporothrix/10_annotations/genome_attributes.txt")
genome_attributes <- left_join(genome_df,genome_attributes)
ML_tree
#make a dataframe of genome attributes
genome_attributes <- read.delim("~/Documents/2023_02_Sporothrix/10_annotations/genome_attributes.txt")
View(genome_df)
str(ML_tree)
ML_tree$tip.label
ML_tree2 <- drop.tip(ML_tree, 24)
ML_tree2$tip.label
ML_tree <- ape::read.tree("~/Documents/2023_02_Sporothrix/09_orthology/OrthoFinder/Results_Aug2/SpeciesTree_rooted_Newick.txt")
ML_tree$tip.label
ML_tree <- drop.tip(ML_tree, 24)
ML_tree$tip.label
str(ML_tree)
ML_dend <- ReadDendrogram(textConnection(write.tree(ML_tree)))
str(ML_dend)
#ML_dend <- DECIPHER::ReadDendrogram("~/Documents/2022_04_eukaryote_annotation/05_genomic_analysis_Sporothrix/ML_tree2.txt",keepRoot = T)
order.dendrogram(ML_dend)
order.dendrogram(ML_dend) <- 1:29 # change the last number to the number of tips.  I'm sure there's a fancy way to put the number of tips but I'm not that fancy.
order.dendrogram(ML_dend)
#make a dataframe of genomes.  I use this dataframe as an anchor to keep the dendrogram and the data aligned.
genome <- unlist(ML_tree$tip.label)
genome_df <- data.frame(genome)
#make a dataframe of genome attributes
genome_attributes <- read.delim("~/Documents/2023_02_Sporothrix/10_annotations/genome_attributes.txt")
genome_attributes <- left_join(genome_df,genome_attributes)
row.names(genome_attributes) = genome_attributes$genome
genome_attributes_lifestyle <- genome_attributes %>%
dplyr::select(-genome) %>%
dplyr::select(mammal_pathogen, arthropod, wood, soil, infructescence, macrofungus)
str(genome_attributes_lifestyle)
genome_attributes_lifestyle_matrix <- as.matrix(genome_attributes_lifestyle)
str(genome_attributes_lifestyle_matrix)
View(genome_attributes_lifestyle_matrix)
#read in data
completeness <- read.delim("eukcc2/eukcc2.txt")
View(completeness)
completeness <- left_join(genome_df,completeness)
completeness <- completeness %>% dplyr::select(-genome_assembly)
row.names(completeness) = completeness$genome
completeness <- completeness %>% dplyr::select(-genome)
completeness_matrix <- as.matrix(completeness)
View(completeness_matrix)
genome_stats <-read.csv("funannotate/funannotate_compare_20230729/stats/genome.stats.summary.csv")
genome_stats <-read.csv("funannotate/funannotate_compare_20230809/stats/genome.stats.summary.csv")
View(genome_attributes)
View(genome_stats)
row.names(genome_stats) = genome_stats$X
genome_stats <- genome_stats %>% dplyr::select(-X)
genome_stats <- as.data.frame(t(genome_stats)) #transpose
rownames(genome_stats)
genome_stats <- genome_stats %>% add_column(genome = rownames(genome_stats), .before = "isolate") #make new column with the row names
genome_stats <- left_join(genome_df,genome_stats)
row.names(genome_stats) = genome_stats$genome
genome_stats <- genome_stats %>% dplyr::select(-genome, -isolate, -locus_tag)
genome_stats <- transform(genome_stats,
Assembly_Size = as.numeric(Assembly_Size),
Average_Scaffold = as.numeric(Average_Scaffold),
Largest_Scaffold = as.numeric(Largest_Scaffold),
Num_Scaffolds = as.numeric(Num_Scaffolds),
Scaffold_N50  = as.numeric(Scaffold_N50),
Percent_GC = as.numeric(Percent_GC),
Num_Genes = as.numeric(Num_Genes),
Num_Proteins = as.numeric(Num_Proteins),
Num_tRNA = as.numeric(Num_tRNA),
Unique_Proteins = as.numeric(Unique_Proteins),
Prots_atleast_1_ortholog = as.numeric(Prots_atleast_1_ortholog),
Single_copy_orthologs = as.numeric(Single_copy_orthologs)
)
str(genome_stats)
#write.table(genome_stats, "../01_funannotate/funannotate_compare_sporothrix_20220915/stats/genome.stats.summary_wide.txt", sep='\t', quote = F, row.names = T)
genome_stats_matrix <- as.matrix(genome_stats)
assembly_size_matrix <- genome_stats_matrix[,1]
no_proteins_matrix <- genome_stats_matrix[,8]
secmets<-read.delim("antiSMASH/antismash.txt") %>% dplyr::select(genome, secondary_metabolite_type) %>%
dplyr::group_by(genome) %>%
dplyr::count(secondary_metabolite_type) %>%
tidyr::spread(secondary_metabolite_type, n, fill=0) %>%
base::as.data.frame()
View(secmets)
secmets <- left_join(genome_df,secmets) %>%
select(genome, NRPS,T1PKS,T3PKS,terpene,"fungal-RiPP-like",other)
row.names(secmets) = secmets$genome
secmets <- secmets %>% dplyr::select(-genome)
secmets_matrix <- as.matrix(secmets)
CAZyme <- read.csv("funannotate/funannotate_compare_20230809/cazy/CAZyme.summary.results.csv")
row.names(CAZyme) = CAZyme$X
CAZyme <- CAZyme %>% dplyr::select(-X)
CAZyme <- as.data.frame(t(CAZyme)) #transpose
CAZyme <- CAZyme %>% add_column(genome = rownames(CAZyme), .before = "AA") #make new column with the row names
CAZyme <- left_join(genome_df,CAZyme)
row.names(CAZyme) = CAZyme$genome
CAZyme <- CAZyme %>% dplyr::select(-genome)
CAZyme_matrix <- as.matrix(CAZyme)
merops<- read.csv("funannotate/funannotate_compare_20230809/merops/MEROPS.summary.results.csv")
row.names(merops) = merops$X
merops <- merops %>% dplyr::select(-X)
merops <- as.data.frame(t(merops))
merops <- merops %>% add_column(genome = rownames(merops), .before = "A")
merops <- left_join(genome_df,merops)
row.names(merops) = merops$genome
merops <- merops %>% dplyr::select(-genome)
merops_matrix <- as.matrix(merops)
annotations <- rowAnnotation(
"compl" = anno_points((completeness_matrix),
width = unit(2, "cm"),
ylim = c(0, 100),
pch = 1:2,
axis_param = list(
at = c(0, 50, 100),
labels = c("0", "50", "100")),
#gp = gpar(col = 2:3),
border = FALSE),
"bp" = anno_barplot((assembly_size_matrix),
width = unit(1, "cm"),
baseline = c(18000000),
ylim = c(18000000, 44000000),
axis_param = list(
at = c(20000000, 42000000),
labels = c("20", "42")),
border = FALSE,
gp = gpar(fill = "#2E3033", col = "#2E3033", lineend = "round")),
"proteins" = anno_barplot((no_proteins_matrix),
width = unit(1, "cm"),
baseline = c(6000),
ylim = c(6000, 11000),
axis_param = list(
at = c(7000, 10000),
labels = c("7k", "10k")),
border = FALSE,
gp = gpar(fill = "#2E3033", col = "#2E3033", lineend = "round")),
gap = unit(3, "mm"),
show_annotation_name = FALSE)
library(circlize)
col_fun = colorRamp2(c(0, max(unlist(CAZyme_matrix))), c("white", "darkorchid"))
col_fun(seq(0, 3))
cazyme_hm <- Heatmap(CAZyme_matrix,
name = "CAZymes",
column_title = "CAZyme\nclasses",
column_title_gp = gpar(fontsize = 12),
col = col_fun,
cluster_rows = ML_dend,
row_dend_width = unit(2, "cm"),
column_names_gp = grid::gpar(fontsize = 8),
row_names_side = "left",
row_names_gp = grid::gpar(fontsize = 8),
width = unit(3, "cm"),
height = unit(8, "cm"),
left_annotation = annotations,
#left_annotation = rowAnnotation(
#pathogen = genome_attributes_matrix[,"mammal_pathogen"],
#soil = genome_attributes_matrix[,"soil"],
#arthropod = genome_attributes_matrix[,"arthropod"],
#wood = genome_attributes_matrix[,"wood"],
#infructescence = genome_attributes_matrix[,"infructescence"],
#macrofungus = genome_attributes_matrix[,"macrofungus"],
#col = list(arthropod = c("1" = "black",
#"NA" = "azure"),
# pathogen = c("1" = "black",
#"NA" = "white"),
#soil = c("1" = "black",
#"NA" = "white"),
#wood = c("1" = "black",
#"NA" = "white"),
#infructescence = c("1" = "black",
#"NA" = "white"),
#macrofungus = c("1" = "black",
#"NA" = "white")),
#show_legend = FALSE),
show_heatmap_legend = FALSE,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(CAZyme_matrix[i, j], x, y, gp = gpar(fontsize = 6))})
cazyme_hm
col_fun = colorRamp2(c(0, max(unlist(secmets_matrix))), c("white", "deepskyblue4"))
secmets_hm <- Heatmap(secmets_matrix,
name = "BGCs",
col = col_fun,
column_title = "Biosynthetic gene\nclusters",
column_title_gp = gpar(fontsize = 12),
cluster_rows = ML_dend,
row_dend_width = unit(2, "cm"),
column_names_gp = grid::gpar(fontsize = 8),
row_names_side = "left",
row_names_gp = grid::gpar(fontsize = 8),
width = unit(3.5, "cm"),
height = unit(8, "cm"),
#right_annotation = annotations,
show_heatmap_legend = FALSE,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(secmets_matrix[i, j], x, y, gp = gpar(fontsize = 6))})
secmets_hm
col_fun = colorRamp2(c(0, max(unlist(merops_matrix))), c("white", "aquamarine4"))
merops_hm <- Heatmap(merops_matrix,
name = "proteases",
column_title = "Protease\nclasses",
column_title_gp = gpar(fontsize = 12),
col = col_fun,
cluster_rows = ML_dend,
row_dend_width = unit(2, "cm"),
column_names_gp = grid::gpar(fontsize = 8),
row_names_side = "left",
row_names_gp = grid::gpar(fontsize = 8),
width = unit(4.5, "cm"),
height = unit(8, "cm"),
#right_annotation = annotations,
show_heatmap_legend = FALSE,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(merops_matrix[i, j], x, y, gp = gpar(fontsize = 6))})
merops_hm
library(circlize)
col_fun = colorRamp2(c(0, 1), c("white", "grey"))
col_fun(seq(0, 3))
attributes_hm <- Heatmap(genome_attributes_lifestyle_matrix,
name = "Attributes",
column_title = "Association\n",
column_title_gp = gpar(fontsize = 12),
col = col_fun,
cluster_rows = ML_dend,
row_dend_width = unit(2, "cm"),
column_names_gp = grid::gpar(fontsize = 8),
row_names_side = "left",
row_names_gp = grid::gpar(fontsize = 8),
width = unit(3, "cm"),
height = unit(8, "cm"),
show_heatmap_legend = FALSE)
attributes_hm
#write to pdf
pdf(file="figures/sporothrix_overview.pdf", width=12, height=8)
attributes_hm + cazyme_hm + secmets_hm + merops_hm
decorate_annotation("compl", {
grid.text("Assembly", y = unit(1, "npc") + unit(18, "mm"), just = "bottom", rot = 0, gp = gpar(fontsize = 12))
})
decorate_annotation("compl", {
grid.text("completeness", y = unit(1, "npc") + unit(13, "mm"), just = "bottom", rot = 0, gp = gpar(fontsize = 12))
})
decorate_annotation("bp", {
grid.text("Mbp", y = unit(1, "npc") + unit(18, "mm"), just = "bottom", rot = 0, gp = gpar(fontsize = 12))
})
decorate_annotation("proteins", {
grid.text("Predicted", y = unit(1, "npc") + unit(18, "mm"), just = "bottom", rot = 0, gp = gpar(fontsize = 12))
})
decorate_annotation("proteins", {
grid.text("proteins", y = unit(1, "npc") + unit(13, "mm"), just = "bottom", rot = 0, gp = gpar(fontsize = 12))
})
dev.off()
